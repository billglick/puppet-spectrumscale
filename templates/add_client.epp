<%- | String $ssh_private_key_contents,
      String $ssh_private_key_path,
      String $gpfs_master,
      String $client_hostname,
      String $script_fn,
    | -%>
#!/bin/bash

DEBUG=1

TOUCH=$(command -v touch)
CHMOD=$(command -v chmod)
CAT=$(command -v cat)
SSH=$(command -v ssh)
IPTABLES=$(command -v iptables)
RM=$(command -v rm)

FN_SSHKEY="<%= $ssh_private_key_path%>"
$TOUCH $FN_SSHKEY
$CHMOD 600 $FN_SSHKEY
$CAT >$FN_SSHKEY <<< "<%= $ssh_private_key_contents %>"

[[ $DEBUG -gt 0 ]] && set -x

SSHCOMMAND="$SSH -o StrictHostKeyChecking=no -i $FN_SSHKEY <%= $gpfs_master %>"

function add_firewall {
    [[ $DEBUG -gt 0 ]] && set -x
    mod_firewall_helper '-I INPUT 1'
}


function delete_firewall {
    [[ $DEBUG -gt 0 ]] && set -x
    mod_firewall_helper '-D INPUT'
}

function mod_firewall_helper {
    [[ $DEBUG -gt 0 ]] && set -x
    action="$1"
    $IPTABLES $action -s <%= $gpfs_master %> -m state --state NEW -j DROP
    $IPTABLES $action -s <%= $gpfs_master %> -m state --state ESTABLISHED -j ACCEPT
}


# Block incoming traffic from gpfs server
add_firewall

# Remove gpfs client node registration from server
$SSHCOMMAND /usr/lpp/mmfs/bin/mmdelnode <%= $client_hostname %>

# Allow incoming traffic from gpfs server
delete_firewall

# Add gpfs client node on server
$SSHCOMMAND /usr/lpp/mmfs/bin/mmaddnode <%= $client_hostname %>

# Accept client license
$SSHCOMMAND /usr/lpp/mmfs/bin/mmchlicense client --accept -N <%= $client_hostname %>

# Remove ssh key
$RM -f $FN_SSHKEY

# Remove this file
$RM -f <%= $script_fn %>
